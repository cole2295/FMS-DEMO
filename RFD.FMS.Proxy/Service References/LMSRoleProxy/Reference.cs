//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace RFD.FMS.Proxy.LMSRoleProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessPermissionNode", Namespace="http://schemas.datacontract.org/2004/07/RFD.LMS.Model.Permission")]
    [System.SerializableAttribute()]
    public partial class AccessPermissionNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionTypeEnum AccessPermissionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionTypeEnum AccessPermissionType {
            get {
                return this.AccessPermissionTypeField;
            }
            set {
                if ((this.AccessPermissionTypeField.Equals(value) != true)) {
                    this.AccessPermissionTypeField = value;
                    this.RaisePropertyChanged("AccessPermissionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessPermissionTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/RFD.LMS.Model.Permission")]
    public enum AccessPermissionTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubSystem = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PageUrl = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PageDom = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Function = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataPermissionNode", Namespace="http://schemas.datacontract.org/2004/07/RFD.LMS.Model.Permission")]
    [System.SerializableAttribute()]
    public partial class DataPermissionNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode[] DataPermissionNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasAllChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode[] DataPermissionNodes {
            get {
                return this.DataPermissionNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.DataPermissionNodesField, value) != true)) {
                    this.DataPermissionNodesField = value;
                    this.RaisePropertyChanged("DataPermissionNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAllChildren {
            get {
                return this.HasAllChildrenField;
            }
            set {
                if ((this.HasAllChildrenField.Equals(value) != true)) {
                    this.HasAllChildrenField = value;
                    this.RaisePropertyChanged("HasAllChildren");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentIdField, value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LMSRoleProxy.IPermissionProvider")]
    public interface IPermissionProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadAccessPermissionData", ReplyAction="http://tempuri.org/IPermissionProvider/LoadAccessPermissionDataResponse")]
        RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionNode[] LoadAccessPermissionData(string userCode, string subSysKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadAccessPermissionDataByRuleKey", ReplyAction="http://tempuri.org/IPermissionProvider/LoadAccessPermissionDataByRuleKeyResponse")]
        RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionNode[] LoadAccessPermissionDataByRuleKey(string userCode, string subSysKey, string ruleKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadDataPermissionNodes", ReplyAction="http://tempuri.org/IPermissionProvider/LoadDataPermissionNodesResponse")]
        RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode LoadDataPermissionNodes(string userCode, string subSysKey, string dataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadDataPermissionDicByLevel", ReplyAction="http://tempuri.org/IPermissionProvider/LoadDataPermissionDicByLevelResponse")]
        System.Collections.Generic.Dictionary<string, string> LoadDataPermissionDicByLevel(string userCode, string subSysKey, string dataType, int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadHasAllChildDataPermissionDic", ReplyAction="http://tempuri.org/IPermissionProvider/LoadHasAllChildDataPermissionDicResponse")]
        System.Collections.Generic.Dictionary<string, string> LoadHasAllChildDataPermissionDic(string userCode, string subSysKey, string dataType, int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadDataPermissionDicByParentId", ReplyAction="http://tempuri.org/IPermissionProvider/LoadDataPermissionDicByParentIdResponse")]
        System.Collections.Generic.Dictionary<string, string> LoadDataPermissionDicByParentId(string userCode, string subSysKey, string dataType, string parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/LoadAllDataPermissionSource", ReplyAction="http://tempuri.org/IPermissionProvider/LoadAllDataPermissionSourceResponse")]
        RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode LoadAllDataPermissionSource(string subSysKey, string dataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/CheckAccessSubSystem", ReplyAction="http://tempuri.org/IPermissionProvider/CheckAccessSubSystemResponse")]
        bool CheckAccessSubSystem(string userCode, string subSysKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionProvider/CheckIsAdminRole", ReplyAction="http://tempuri.org/IPermissionProvider/CheckIsAdminRoleResponse")]
        bool CheckIsAdminRole(string userCode, string subSysKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPermissionProviderChannel : RFD.FMS.Proxy.LMSRoleProxy.IPermissionProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PermissionProviderClient : System.ServiceModel.ClientBase<RFD.FMS.Proxy.LMSRoleProxy.IPermissionProvider>, RFD.FMS.Proxy.LMSRoleProxy.IPermissionProvider {
        
        public PermissionProviderClient() {
        }
        
        public PermissionProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PermissionProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionNode[] LoadAccessPermissionData(string userCode, string subSysKey) {
            return base.Channel.LoadAccessPermissionData(userCode, subSysKey);
        }
        
        public RFD.FMS.Proxy.LMSRoleProxy.AccessPermissionNode[] LoadAccessPermissionDataByRuleKey(string userCode, string subSysKey, string ruleKey) {
            return base.Channel.LoadAccessPermissionDataByRuleKey(userCode, subSysKey, ruleKey);
        }
        
        public RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode LoadDataPermissionNodes(string userCode, string subSysKey, string dataType) {
            return base.Channel.LoadDataPermissionNodes(userCode, subSysKey, dataType);
        }
        
        public System.Collections.Generic.Dictionary<string, string> LoadDataPermissionDicByLevel(string userCode, string subSysKey, string dataType, int level) {
            return base.Channel.LoadDataPermissionDicByLevel(userCode, subSysKey, dataType, level);
        }
        
        public System.Collections.Generic.Dictionary<string, string> LoadHasAllChildDataPermissionDic(string userCode, string subSysKey, string dataType, int level) {
            return base.Channel.LoadHasAllChildDataPermissionDic(userCode, subSysKey, dataType, level);
        }
        
        public System.Collections.Generic.Dictionary<string, string> LoadDataPermissionDicByParentId(string userCode, string subSysKey, string dataType, string parentId) {
            return base.Channel.LoadDataPermissionDicByParentId(userCode, subSysKey, dataType, parentId);
        }
        
        public RFD.FMS.Proxy.LMSRoleProxy.DataPermissionNode LoadAllDataPermissionSource(string subSysKey, string dataType) {
            return base.Channel.LoadAllDataPermissionSource(subSysKey, dataType);
        }
        
        public bool CheckAccessSubSystem(string userCode, string subSysKey) {
            return base.Channel.CheckAccessSubSystem(userCode, subSysKey);
        }
        
        public bool CheckIsAdminRole(string userCode, string subSysKey) {
            return base.Channel.CheckIsAdminRole(userCode, subSysKey);
        }
    }
}
